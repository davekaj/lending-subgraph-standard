enum LendingType {
    CDP
    Pooled
}

enum RiskType {
    GlobalRisk
    IsolatedRisk
}

"""
Protocol represents all aggregated information of a single protocol on a single network.
"""
type Protocol @entity {
    "The Name of the Protocol"
    id: ID!
    "The Network the protocol exists on - Ethereum, Polygon, etc."
    network: String!
    "Type of lending protocol"
    type: LendingType!
    "Type of risk"
    riskType: RiskType!

    "Current deposited amount of all collateral types in USD"
    depositedUSD: BigDecimal!
    "Current borrowed amount of all borrowed assets in USD"
    borrowedUSD: BigDecimal!

    "Accumulated deposited amount in USD"
    lifetimeDepositedUSD: BigInt!
    "Accumulated withdrawn amount in USD"
    lifetimeWithdrawnUSD: BigInt!
    "Accumulated borrowed amount in USD"
    lifetimeBorrowedUSD: BigDecimal
    "Accumulated repaid amount in USD"
    lifetimeRepaidUSD: BigDecimal!
    "Accumulated liquidated amount in USD"
    lifetimeLiquidatedUSD: BigDecimal!

    "The number of time Deposits have occurred in all markets"
    depositCount: BigInt!
    "The number of time Withdraws have occurred in all markets"
    withdrawCount: BigInt!
    "The number of time Borrows have occurred in all markets"
    borrowCount: BigInt!
    "The number of time Repays have occurred in all markets"
    repayCount: BigInt!
    "The number of time Liquidations have occurred in all markets"
    liquidatedCount: BigInt!

    "All Deposit events in every Market"
    deposits: [Deposit!]! @derivedFrom(field: "protocol")
    "All Withdraw events in every Market"
    withdraws: [Withdraw!]! @derivedFrom(field: "protocol")
    "All Borrow events in every Market"
    borrows: [Borrow!]! @derivedFrom(field: "protocol")
    "All Repay events in every Market"
    repays: [Repay!]! @derivedFrom(field: "protocol")
    "All Liquidation events in every Market"
    liquidations: [Liquidate!]! @derivedFrom(field: "protocol")
}

"""
A single Market within a protocol. A Market can be a single pool where all assets are pooled together. It can also be a combination of Collateralized Debt Positions (CDPs). The CDPs are aggregated together to represent a uniform Market.
"""
type Market @entity {
    "Contract address"
    id: ID! # TODO - some ambiguity here. Some markets might not have their own contract address
    "Name of the Market"
    name: String! # Should be derived from onchain data
    "The Protocol the Market is a part of"
    protocol: Protocol!

    "Asset deposited in the market as collateral"
    depositAsset: Asset!
    "Asset borrowed. CDP style is native asset - i.e. DAI. Aave style borrowed asset == deposit Asset"
    borrowAsset: Asset!
    "Current deposit amount in depositAsset"
    deposited: BigDecimal!
    "Current deposit amount in USD"
    depositedUSD: BigDecimal!
    "Current borrow amount in borrowAsset"
    borrowed: BigDecimal!
    "Current borrow amount in USD"
    borrowedUSD: BigDecimal!

    "Accumulated deposited amount in depositAsset"
    lifetimeDeposited: BigInt!
    "Accumulated deposited amount in USD"
    lifetimeDepositedUSD: BigInt!
    "Accumulated withdrawn amount in depositAsset"
    lifetimeWithdrawn: BigInt!
    "Accumulated withdrawn amount in USD"
    lifetimeWithdrawnUSD: BigInt!
    "Accumulated borrowed amount in borrowAsset"
    lifetimeBorrowed: BigInt!
    "Accumulated borrowed amount in USD"
    lifetimeBorrowedUSD: BigDecimal
    "Accumulated repaid amount in borrowAsset"
    lifetimeRepaid: BigDecimal
    "Accumulated repaid amount in USD"
    lifetimeRepaidUSD: BigDecimal!
    "Accumulated liquidated amount in depositAsset"
    lifetimeLiquidated: BigDecimal!
    "Accumulated liquidated amount in USD"
    lifetimeLiquidatedUSD: BigDecimal!

    "The number of time Deposits have occurred"
    depositCount: BigInt!
    "The number of time Withdraws have occurred"
    withdrawCount: BigInt!
    "The number of time Borrows have occurred"
    borrowCount: BigInt!
    "The number of time Repays have occurred"
    repayCount: BigInt!
    "The number of time Liquidations have occurred"
    liquidatedCount: BigInt!

    "All Deposit events"
    deposits: [Deposit!]! @derivedFrom(field: "market")
    "All Withdraw events"
    withdraws: [Withdraw!]! @derivedFrom(field: "market")
    "All Borrow events"
    borrows: [Borrow!]! @derivedFrom(field: "market")
    "All Repay events"
    repays: [Repay!]! @derivedFrom(field: "market")
    "All Liquidation events"
    liquidations: [Liquidate!]! @derivedFrom(field: "market")
}

"""
An account that has interacted with at least 1 lending protocol
"""
type Account @entity {
    id: ID!
    
    borrowEvents: [Borrow!]!
    borrowCount: Int!
    borrowedAmount: BigInt!
    currentBorrowOutstanding: BigInt!

    repayEvents: [Repay!]!

    lifetimeInterestAccumulated: Int!



    depositEvents: [Borrow!]!
    depositCount: Int!
    depositAmount: BigInt!
    currentDeposits: BigInt!

    redeemEvents: [Redeem!]!

    liquidatedCount: Int!
    totalLiquidatedAmount: BigInt!

    liquidatorCount: Int!
    totalLiquidatorAmount: BigInt!


    protocols: [Protocol!]!
    markets: [Market!]! # Where a market is within a protocol
}

# An accounts history within a single market
type AccountMarket @entity {
    # Everything the same as Account, except for the markets entity
}

# An accounts history within a single Protocol
type AccountProtocol @entity {
    # a combination of all the markets of a single protocol
}

"""
An asset used in a lending protocol
"""
type Asset @entity {
    "Contract address"
    id: ID!
    "Token symbol"
    symbol: String!
}

"""
An event represents something that happened on chain in the Lending Protocol. This includes Deposit, Withdraw, Borrow, Repay, and Liquidate
"""
interface Event {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset transferred"
    asset: Asset!
    "Amount of Tokens transferred"
    amount: BigDecimal!
    "Amount transferred in USD"
    amountUSD: BigDecimal
    "Account that received tokens"
    to: Account!
    "Account that sent tokens"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol the event originated from"
    market: Market!
}

"""
Deposit collateral
"""
type Deposit implements Event @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset deposited"
    asset: Asset!
    "Amount of tokens deposited into the protocol"
    amount: BigDecimal!
    "Amount deposited in USD"
    amountUSD: BigDecimal
    "Protocol contract that received tokens"
    to: Account!
    "Account that sent tokens"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol that the event originated from"
    market: Market!
}

"""
Withdraw collateral
"""
type Withdraw implements Event @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset withdrawn"
    asset: Asset!
    "Amount of tokens being withdrawn from the protocol"
    amount: BigDecimal!
    "Amount withdrawn in USD"
    amountUSD: BigDecimal
    "Account that received tokens"
    to: Account!
    "Protocol contract that sent tokens"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol the event originated from"
    market: Market!
}

"""
Borrow an asset
"""
type Borrow implements Event @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset borrowed"
    asset: Asset!
    "Amount of tokens borrowed from the protocol"
    amount: BigDecimal!
    "Amount borrowed in USD"
    amountUSD: BigDecimal
    "Account that received tokens"
    to: Account!
    "Protocol contract that sent borrowed tokens"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol the event originated from"
    market: Market!
}

"""
Repay a borrowed asset
"""
type Repay implements Event @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset repaid"
    asset: Asset!
    "Amount of tokens repaid to the protocol"
    amount: BigDecimal!
    "Amount repaid in USD"
    amountUSD: BigDecimal
    "Protocol contract that received repayment"
    to: Account!
    "Account that owed the asset"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol the event originated from"
    market: Market!
    "Payer of the debt. Payer is not always the same as borrower. i.e. a liquidation"
    payer: Account!
}

"""
Liquidate an Account that went below the safe borrowing threshold
"""
type Liquidate implements Event @entity {
    "Transaction hash concatenated with log index"
    id: ID!
    "Asset repaid"
    asset: Asset!
    "Amount of tokens repaid to the protocol"
    amount: BigDecimal!
    "Amount repaid in USD"
    amountUSD: BigDecimal
    "Protocol contract that received repayment"
    to: Account!
    "Account that owed the asset"
    from: Account!
    "Block number"
    blockNumber: Int!
    "Block timestamp"
    blockTime: Int!
    "The protocol the event originated from"
    protocol: Protocol!
    "The market within a protocol the event originated from"
    market: Market!
    "Liqudator that paid the debt"
    liquidator: Account!
    "Amount of collateral asset received"
    received: BigDecimal!
    "Profit of the liquidator based on the protocol liquidation fee"
    profit: BigDecimal!
}