enum LendingType {
  "Collateralized Debt Position (CDP) protocols have singular isolated positions created by users. We aggregate them to give a single view of a market"
  CDP
  "Pooled protocols pool all users assets into a single market"
  Pooled
}

enum RiskType {
  "Global risk means each users position in a market is combined for one score to determine if they can be liquidated"
  GLOBAL
  "Isolated risk means each users position in a market or CDP is isolated for risk of liquidation"
  ISOLATED
}

enum Network {
  "The ethereum network"
  ETHEREUM
  "The polygon network"
  POLYGON
  "The avalanche network"
  AVALANCHE
}

"""
Protocol represents all aggregated information of a single protocol on a single network.
"""
type Protocol @entity {
  "The Name of the Protocol"
  id: ID!
  "The Network the protocol exists on - Ethereum, Polygon, etc."
  network: Network!
  "Type of lending protocol"
  type: LendingType!
  "Address of price oracle the comptroller uses"
  priceOracle: Bytes
  "Factor used to determine repayAmount for liquidating"
  closeFactor: BigInt
  "The percent bonus liquidators get for liquidating"
  liquidationIncentive: BigInt
  "Max assets a single user can enter"
  maxAssets: BigInt
}

"""
An asset used in a lending protocol. All assets should follow ERC-20 Standard
"""
type Asset @entity {
  "Contract address"
  id: ID!
  "Token symbol"
  symbol: String!
  "Name of asset"
  name: String!
  "Decimals of the asset"
  decimals: Int!
}

"""
A single Market within a Protocol. A Market can be a single pool where all assets are pooled together. It can also be a combination of Collateralized Debt Positions (CDPs). The CDPs are aggregated together to represent a uniform Market. A Market can only contain 1 depositAsset and 1 borrowAsset.
"""
type Market @entity {
  "Contract address"
  id: ID!
  "Name of the Market"
  name: String!
  "The Protocol the Market is a part of"
  protocol: Protocol!
  "Underlying Asset"
  asset: Asset!
  "Underlying token symbol"
  underlyingSymbol: String!
  "Underlying token address"
  underlyingAddress: Bytes!
  "Underlying token name"
  underlyingName: String!
  "CToken symbol"
  symbol: String!
  "Underlying token decimal length"
  underlyingDecimals: Int!
  "Current deposited amount in depositAsset"
  deposited: BigDecimal!
  "Current borrowed amount in borrowAsset"
  borrowed: BigDecimal!
  "Address of the interest rate model"
  interestRateModelAddress: Bytes!
  "Exchange rate of tokens / cTokens"
  exchangeRate: BigDecimal!
  "Collateral factor determining how much one can borrow"
  collateralFactor: BigDecimal!
}

"""
An account that has interacted with at least 1 lending protocol tracked in the Subgraph
"""
type Account @entity {
  "Contract address"
  id: ID!
  "True if user has ever borrowed"
  hasBorrowed: Boolean!
  "Number of times the account has gotten liquidated"
  liquidatedCount: Int
  "Number of times the account liquidated others"
  liquidatingCount: Int
}

"""
An event is a general action that occurs in a Lending Protocol
"""
type Event @entity {
  "The Protocol the event originated from"
  protocol: Protocol!
  "Transaction hash concatenated with log index"
  id: ID!
  "The Market within a Protocol the event originated from"
  market: Market!
  "Main account involved in the event"
  account: Account!
  "Account to be transferred to - Relevant to Transfer event"
  to: Account
  "Event type: Deposit Withdraw Borrow Repay Liquidate"
  eventType: String!
  "Amount of Tokens transferred"
  amount: BigDecimal!
  "Block timestamp"
  blockTime: Int!
  "Amount of Tokens transferred - Related to - Mint and Withdraw event"
  underlyingAmount: BigDecimal
  "Liquidator that paid the debt: Relevant only for Liquidation event"
  liquidator: Account
  "Account of the payer - Related to Repay event"
  payer: Account
}
